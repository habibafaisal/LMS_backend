generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// user for auth & roles
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      Role
  createdAt DateTime @default(now())
  // relations
  students  Student?
  teachers  Teacher?
}

model Teacher {
  id            Int         @id @default(autoincrement())
  first_name    String?     @db.VarChar(100)
  last_name     String?     @db.VarChar(100)
  department_id Int?
  department    Department? @relation(fields: [department_id], references: [id])

  // relation to user model
  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])

  // courses teacher is teaching
  teacher_courses Teacher_Course[]
}

model Student {
  id             Int         @id @default(autoincrement())
  first_name     String?     @db.VarChar(100)
  last_name      String?     @db.VarChar(100)
  phone_number   String?     @db.VarChar(15)
  department_id  Int?
  batch_id       Int?
  section_id     Int?
  admission_date DateTime?
  department     Department? @relation(fields: [department_id], references: [id])
  batch          Batch?      @relation(fields: [batch_id], references: [id])
  section        Section?    @relation(fields: [section_id], references: [id])

  // relation to user model
  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])

  // courses student is enrolled in
  enrollments Enrollment[]
  Grade       Grade[]
}

model Department {
  id               Int                @id @default(autoincrement())
  department_name  String             @db.VarChar(100)
  // relations
  teachers         Teacher[]
  students         Student[]
  courses          Course[]
  Department_Batch Department_Batch[]
}

model Batch {
  id           Int                @id @default(autoincrement())
  batch_year   Int
  dept_batches Department_Batch[]
  Student      Student[]
}

model Department_Batch {
  id            Int        @id @default(autoincrement())
  department_id Int
  batch_id      Int
  department    Department @relation(fields: [department_id], references: [id])

  batch    Batch     @relation(fields: [batch_id], references: [id])
  sections Section[]
}

model Section {
  id            Int              @id @default(autoincrement())
  section_name  String           @db.VarChar(10)
  dept_batch_id Int
  dept_batch    Department_Batch @relation(fields: [dept_batch_id], references: [id])
  students      Student[]
}

model Course {
  id              Int              @id @default(autoincrement())
  course_name     String           @db.VarChar(100)
  course_code     String           @db.VarChar(100)
  credit_hours    Int
  dept_id         Int
  department      Department       @relation(fields: [dept_id], references: [id])
  // teachers assigned to courses
  teacher_courses Teacher_Course[]
  //  student enrolled in courses
  enrollments     Enrollment[]
  Grade           Grade[]
}

model Teacher_Course {
  id         Int     @id @default(autoincrement())
  teacher_id Int
  course_id  Int
  teacher    Teacher @relation(fields: [teacher_id], references: [id])
  course     Course  @relation(fields: [course_id], references: [id])
}

model Semester {
  id            Int          @id @default(autoincrement())
  semester_name String       @db.VarChar(100)
  start_date    DateTime
  end_date      DateTime
  enrollments   Enrollment[]
  Grade         Grade[]
}

// student-course enrollments (many to many)
model Enrollment {
  id              Int      @id @default(autoincrement())
  student_id      Int
  course_id       Int
  semester_id     Int
  enrollment_date DateTime
  student         Student  @relation(fields: [student_id], references: [id])
  course          Course   @relation(fields: [course_id], references: [id])
  semester        Semester @relation(fields: [semester_id], references: [id])
}

// grade model to track students grade in courses

model Grade {
  id          Int      @id @default(autoincrement())
  student_id  Int
  course_id   Int
  semester_id Int
  grade       String   @db.VarChar(5)
  // relations
  student     Student  @relation(fields: [student_id], references: [id])
  course      Course   @relation(fields: [course_id], references: [id])
  semester    Semester @relation(fields: [semester_id], references: [id])
}
